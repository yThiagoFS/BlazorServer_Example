@page "/"
@using BlazorWASMExample.Models;
@using RestSharp;

<PageTitle>Categories</PageTitle>

<h1>Categories</h1>

<div class="text-danger">@_errorMessage</div>

@if(_categories is null && _errorMessage is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th scope="col">Id</th>
                <th scope="col">Name</th>
                <th scope="col">Description</th>
            </tr>
        </thead>
        <tbody>

            @foreach (var category in _categories ?? Enumerable.Empty<Category>())
            {
                <tr>
                    <td>@category.Id</td>
                    <td>@category.Name</td>
                    <td>@category.Description</td>
                    <td>
                        <button class="btn btn-info" @onclick="() => Get(category.Id)">Edit</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}


<!--POST (Create)-->
<input readonly class="form-control" @bind-value="_category.Id" />
<div class="mb-3">
    <label class="form-label">Title</label>
    <input type="text" class="form-control" @bind-value="_category.Name" />
</div>
<div class="mb-3">
    <label class="form-label">Description</label>
    <input type="text" class="form-control" @bind-value="_category.Description" />
</div>

@if(_category?.Id > 0)
{
    <button class="btn btn-primary" onclick="@EditAsync">Save</button>
    <button class="btn btn-danger" @onclick="() => DeleteAsync(_category!.Id)">Delete</button>
}
else
{
    <button class="btn btn-primary" onclick="@PostAsync">Create</button>
}



@code {

    List<Category>? _categories;
    Category? _category = new();

    string _errorMessage = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var client = new RestClient();
            var request = new RestRequest("url");

            _categories = await client.GetAsync<List<Category>>(request);
        }
        catch(Exception ex)
        {
            _errorMessage = ex.Message;
            _categories = SeedData.SeedCategories();
        }
    }

    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);
    }

    async Task PostAsync()
    {
        try
        {
            var client = new RestClient();
            var request = new RestRequest("url")
                .AddJsonBody<Category>(_category!);

            var category = await client.PostAsync<Category?>(request);

            if (category is not null)
                _categories?.Add(category);
        }
        catch(Exception ex)
        {
            _errorMessage = ex.Message;

            var categoryAmount = _categories?.Count ?? 0;

            _categories?.Add(
                new Category(
                    (long)categoryAmount++
                    ,_category?.Name ?? $"Category {categoryAmount++}"
                    ,_category?.Description ?? $"Description {categoryAmount++}"));

            _category = new();
        }
    }

    void Get(long id)
    {
        _category = _categories?
            .Where(categ => categ.Id == id)
            .Select(categ => new Category
                {
                    Id = categ.Id,
                    Name = categ.Name,
                    Description = categ.Description
                })
            .FirstOrDefault();
    }

    async Task EditAsync()
    {
        try
        {
            var client = new RestClient();
            var request = new RestRequest($"url/categoryId")
                .AddJsonBody<Category>(_category!);

            await client.PutAsync<Category?>(request);

            var category = _categories!.First(categ => categ.Id == _category!.Id);
            category.Name = _category!.Name;
            category.Description = _category.Description;
        }
        catch
        {
            var category = _categories?.First(categ => categ.Id == _category!.Id);
            category.Name = _category!.Name;
            category.Description = _category!.Description;
        }
    }

    async Task DeleteAsync(long id)
    {
        try
        {
            var client = new RestClient();
            var request = new RestRequest($"url/categoryId")
                .AddJsonBody(new { Id = _category?.Id });

            await client.DeleteAsync<Category?>(request);
        }
        catch
        {
            _categories?.Remove(_categories.First(categ => categ.Id == id));
            _category = new();
        }
    }
}